<template>
  <div class="container" style="width:99%;">
	<!--工具栏-->
	<div class="toolbar" style="float:left;padding-top:10px;padding-left:15px;">
		<el-form :inline="true" :model="filters" :size="size">
			<el-form-item>
				<el-input v-model="filters.__demoField__" placeholder="名称"></el-input>
			</el-form-item>
			<el-form-item>
				<kt-button :label="$t('action.search')" perms="prj:${table.objectName}:view" type="primary" @click="findPage(null)"/>
			</el-form-item>
			<el-form-item>
				<kt-button :label="$t('action.add')" perms="prj:${table.objectName}:add" type="primary" @click="handleAdd" />
			</el-form-item>
		</el-form>
	</div>
	<!--表格内容栏-->
	<kt-table permsEdit="prj:${table.objectName}:edit" permsDelete="prj:${table.objectName}:delete"
		:data="pageResult" :columns="columns" 
		@findPage="findPage" @handleEdit="handleEdit" @handleDelete="handleDelete">
	</kt-table>
	<!--新增编辑界面-->
	<el-dialog :title="(operation?'新增':'编辑')+' - '+this.$store.state.tab.mainTabsActiveName" 
		   width="45%" :visible.sync="editDialogVisible" :close-on-click-modal="false" v-dialogDrag >
		<el-form :model="dataForm" label-width="150px" :rules="dataFormRules" ref="dataForm" :size="size">
			<!-- v-if="dataForm.isPrimaryKey"  "column.isPrimaryKey"  "union primary key" -->
<%
	var columnNames_remove=["createBy","createTime","lastUpdateBy","lastUpdateTime","deleteFlag"];
	var columns_target=[];
	for(column in table.columns){
		if(!array.contain(columnNames_remove,column.fieldName)){
			array.add(columns_target,column);
		}
	}
%>

<%
	for(column in columns_target) {
%>
			<el-form-item label="${column.description}" prop="${column.fieldName}" <% if(strutil.toLowerCase(column.fieldName) == "id") { %> v-if="dataForm.${column.fieldName} != null" v-show="false" <% } %> >
			<%
				if(column.dataType == "datetime"){
			%>
				<el-date-picker v-model="dataForm.${column.fieldName}" type="datetime" placeholder="选择${column.description}"
				      style="width:100%;"  align="right" >
				</el-date-picker>		
			<%
				} else {
			%>
				<el-input v-model="dataForm.${column.fieldName}" auto-complete="off"></el-input>
			<%
				}
			%>
			</el-form-item>
<%
	}
%>
		</el-form>
		<div slot="footer" class="dialog-footer">
			<el-button :size="size" @click.native="editDialogVisible = false">{{$t('action.cancel')}}</el-button>
			<el-button :size="size" type="primary" @click.native="submitForm" :loading="editLoading">{{$t('action.submit')}}</el-button>
		</div>
	</el-dialog>
  </div>
</template>

<script>
import KtTable from "@/views/Core/KtTable"
import KtButton from "@/views/Core/KtButton"
import { format } from "@/utils/datetime"
//表单模板
const dataForm_Temp = {
<%
	for(column in columns_target) {
%>
		${column.fieldName}: null,
<%
	}
%>
}
export default {
	name:"${table.className}",
	components:{
			KtTable,
			KtButton
	},
	data() {
		return {
			size: 'small',
			filters: {
				__demoField__: ''
			},
			columns: [
<%
	for(column in columns_target) {
%>	
				{prop:"${column.fieldName}", label:"${column.description}", minWidth:100, <% if(column.dataType == "datetime"){ %> formatter: this.dateFormat <% } %> },
<%
	}
%>
			],
			pageRequest: { pageNum: 1, pageSize: 8 },
			pageResult: {},

			operation: false, // true:新增, false:编辑
			editDialogVisible: false, // 新增编辑界面是否显示
			editLoading: false,
			dataFormRules: {
				__demoField__: [
					{ required: true, message: '请输入名称', trigger: 'blur' }
				]
			},
			// 新增编辑界面数据
			dataForm: Object.assign({},dataForm_Temp)
		}
	},
	methods: {
		// 获取分页数据
		findPage: function (data) {
			if(data !== null) {
				this.pageRequest = data.pageRequest
			}
			this.pageRequest.columnFilters = {__demoField__: {name:'__demoField__', value:this.filters.__demoField__}}
			this.$api.${table.objectName}.findPage(this.pageRequest).then((res) => {
				this.pageResult = res.data
			}).then(data!=null?data.callback:'')
		},
		// 批量删除
		handleDelete: function (data) {
			this.$api.${table.objectName}.batchDelete(data.params).then(data!=null?data.callback:'')
		},
		// 显示新增界面
		handleAdd: function () {
			this.editDialogVisible = true
			this.operation = true
			this.dataForm = Object.assign({},dataForm_Temp),
			this.$nextTick(() => {
				this.$refs.dataForm.clearValidate()
			})
		},
		// 显示编辑界面
		handleEdit: function (params) {
			this.editDialogVisible = true
			this.operation = false
			this.dataForm = Object.assign({}, params.row),
			this.$nextTick(() => {
				this.$refs.dataForm.clearValidate()
			})
		},
		// 编辑
		submitForm: function () {
			this.$refs.dataForm.validate((valid) => {
				if (valid) {
					this.$confirm('确认提交吗？', '提示', {}).then(() => {
						this.editLoading = true
						let params = Object.assign({}, this.dataForm)
						this.$api.${table.objectName}.save(params).then((res) => {
							if(res.code == 200) {
								this.$message({ message: '操作成功', type: 'success' })
							} else {
								this.$message({message: '操作失败, ' + res.msg, type: 'error'})
							}
							this.editLoading = false
							this.$refs['dataForm'].resetFields()
							this.editDialogVisible = false
							this.findPage(null)
						})
					})
				}
			})
		},
		// 时间格式化
      	dateFormat: function (row, column, cellValue, index){
        	return format(row[column.property])
      	}
	},
	mounted() {
	}
}
</script>

<style scoped>

</style>