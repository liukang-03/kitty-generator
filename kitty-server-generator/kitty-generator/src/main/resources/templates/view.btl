<template>
<%
	var columnNames_remove=["createBy","createTime","lastUpdateBy","lastUpdateTime","deleteFlag","delFlag"];
	var columns_target=[];
	for(column in table.columns) {
		if(!array.contain(columnNames_remove,column.fieldName)){
			array.add(columns_target,column);
		}
	}
%>
  <div class="page-container" >
	<!--工具栏-->
	<div class="toolbar search-bar">
		<el-form :inline="true" :model="filters" :size="size">
		<%
		   for(column in columns_target) {
			  if(column.isSearch) {
		%>
			<el-form-item>
			<% if(column.dataType == "datetime"){ %>
				<el-date-picker v-model="filters.${column.fieldName}" type="datetime" placeholder="选择${column.description}"
					  style="width:200px;" >
				</el-date-picker>
			<% } else if(column.isDict) { %>
				<el-select style="width:200px;" v-model="filters.${column.fieldName}" clearable filterable placeholder="请选择${column.description}" >
					<el-option v-for="item in options_${column.fieldName}" :key="item.value" :label="item.label" :value="item.value"></el-option>
				</el-select>
			<% } else { %>
				<el-input v-model="filters.${column.fieldName}" placeholder="${column.description}" ></el-input>
			<% } %>
			</el-form-item>
		<%
			  }
		   }
		%>
			<el-form-item>
				<kt-button :label="$t('action.search')" perms="prj:${table.objectName}:view" type="primary" @click="findPage(null)"/>
			</el-form-item>
			<el-form-item>
				<kt-button :label="$t('action.add')" perms="prj:${table.objectName}:add" type="primary" @click="handleAdd" />
			</el-form-item>
		</el-form>
	</div>
	<!--表格内容栏-->
	<kt-table :height="height" permsEdit="prj:${table.objectName}:edit" permsDelete="prj:${table.objectName}:delete"
		:data="pageResult" :columns="columns" ref="currTable" @beforeHooks="beforeHooks"
		:isReady="isReady" :showParticulars="showParticulars" :showOperation="!showParticulars"
		@findPage="findPage" @handleEdit="handleEdit" @handleDelete="handleDelete">
	</kt-table>
	<!--新增编辑界面-->
	<el-dialog :title="(operation?'新增':(showParticulars?'查看':'编辑'))+' - '+this.$store.state.tab.mainTabsActiveName"
		   width="45%" :visible.sync="editDialogVisible" :close-on-click-modal="false" v-dialogDrag >
		<el-form :model="dataForm" label-width="150px" :rules="dataFormRules" ref="dataForm" :size="size">
			<!-- v-if="dataForm.isPrimaryKey"  "column.isPrimaryKey"  "union primary key" -->

<%
	var is_column_id = false;
	for(column in columns_target) {
		is_column_id = (strutil.toLowerCase(column.fieldName) == "id");
%>
			<el-form-item label="${column.description}" prop="${column.fieldName}" <% if(is_column_id) { %> v-if="dataForm.${column.fieldName} != null" v-show="false" <% } %> >
			<%
				if(column.dataType == "datetime"){
			%>
				<el-date-picker v-model="dataForm.${column.fieldName}" type="datetime" placeholder="选择${column.description}"
					  style="width:100%;"  align="right" >
				</el-date-picker>		
			<%
				} else if(column.isDict) {
			%>
				<el-select style="width:100%" v-model="dataForm.${column.fieldName}" clearable filterable placeholder="请选择${column.description}" :disabled="showParticulars" >
					<el-option v-for="item in options_${column.fieldName}" :key="item.value" :label="item.label" :value="item.value"></el-option>
				</el-select>
			<%
				} else if(is_column_id) {
			%>
				<el-input v-if="!showParticulars" v-model="dataForm.${column.fieldName}" auto-complete="off"></el-input>
			<%
				} else {
			%>
				<el-input v-model="dataForm.${column.fieldName}" auto-complete="off" :disabled="showParticulars" ></el-input>
			<%
				}
			%>
			</el-form-item>
<%
	}
%>
		</el-form>
		<div slot="footer" class="dialog-footer">
			<el-button :size="size" @click.native="editDialogVisible = false">{{showParticulars ? $t('action.close'):$t('action.cancel')}}</el-button>
			<el-button :size="size" v-if="!showParticulars" type="primary" @click.native="submitForm" :loading="editLoading">{{$t('action.submit')}}</el-button>
		</div>
	</el-dialog>
  </div>
</template>

<script>
import KtTable from "@/views/Core/KtTable"
import KtButton from "@/views/Core/KtButton"
import { dateFormat_Table } from "@/utils/datetime"

//表单模板
const dataForm_Temp = {
<% for(column in columns_target) { %> ${column.fieldName}: null,<% } %>
}

export default {
	name:"${table.className}",
	components:{
			KtTable,
			KtButton
	},
	data() {
		return {
			isReady: false,
			showParticulars: false, // 启用查看（页面将不可编辑）
			height: window.innerHeight*0.6,
			size: 'small',
			filters: {
				<%
				   for(column in columns_target) {
					  if(column.isSearch) {
				%>
				${column.fieldName}: '',
				<%
					  }
				   }
				%>
			},
			columns: [
			<%
				for(column in columns_target) {
					if(strutil.toLowerCase(column.fieldName) != "id") {
			%>
					<% if(column.isDict){ %>
				{prop:"${column.fieldName}_Label", label:"${column.description}", minWidth:100 },
					<% } else { %>
				{prop:"${column.fieldName}", label:"${column.description}", minWidth:100, <% if(column.dataType == "datetime"){ %> formatter: dateFormat_Table <% } %> },
					<% } %>
			<%
					}
				}
			%>
			],
			pageRequest: { pageNum: 1, pageSize: 8 },
			pageResult: {},
			/* 翻译字典项 */
			translation: [],
			//字典项
			<%
			   for(column in columns_target) {
				  if(column.isDict) {
			%>
			options_${column.fieldName}: [],
			<%
				  }
			   }
			%>

			operation: false, // true:新增, false:编辑
			editDialogVisible: false, // 新增编辑界面是否显示
			editLoading: false,
			dataFormRules: {
				<%
				   for(column in columns_target) {
					  if(!column.isNullable && strutil.toLowerCase(column.fieldName) != "id") {
				%>
				${column.fieldName}: [{ required: true, message: '请输入${column.description}', trigger: 'blur' }],
				<%
					  }
				   }
				%>
			},
			// 新增编辑界面数据
			dataForm: Object.assign({},dataForm_Temp)
		}
	},
	methods: {
		// 获取分页数据
		findPage: function (data) {
			if(data !== null) {
				this.pageRequest = data.pageRequest
			}
			this.pageRequest.columnFilters = {
			<%
			   for(column in columns_target) {
				  if(column.isSearch) {
			%>
				${column.fieldName}: {name:'${column.fieldName}', value:this.filters.${column.fieldName}},
			<%
				  }
			   }
			%>
			}
			this.$api.${table.objectName}.findPage(this.pageRequest).then((res) => {
				let tmpLs = res.data
				for(let i=0,j=tmpLs.content.length;i<j;i++) {
					this.translation.forEach(item => {
						tmpLs.content[i][item.col_label] = this.$refs.currTable.findNameByValue(item.options, tmpLs.content[i][item.col])
					});
				}
				this.pageResult = tmpLs
				//this.pageResult = res.data
			}).then(data!=null?data.callback:'')
		},
		// 批量删除
		handleDelete: function (data) {
			this.$api.${table.objectName}.batchDelete(data.params).then(data!=null?data.callback:'')
		},
		// 显示新增界面
		handleAdd: function () {
			this.editDialogVisible = true
			this.operation = true
			this.dataForm = Object.assign({},dataForm_Temp),
			this.$nextTick(() => {
				this.$refs.dataForm.clearValidate()
			})
		},
		// 显示编辑界面
		handleEdit: function (params) {
			this.editDialogVisible = true
			this.operation = false
			this.dataForm = Object.assign({}, params.row),
			this.$nextTick(() => {
				this.$refs.dataForm.clearValidate()
			})
		},
		// 编辑
		submitForm: function () {
			this.$refs.dataForm.validate((valid) => {
				if (valid) {
					this.$confirm('确认提交吗？', '提示', {}).then(async () => {
						<% if(!isEmpty(table.uniqueKeys)) { %>
						//校验唯一性
						let uniqueRes = await this.$api.mCar.isUnique({
							<% for(uniqueKey in table.uniqueKeys){ %>
							"${uniqueKey.fieldName}":this.dataForm.${uniqueKey.fieldName},
							<% } %>
							"id": (this.dataForm.id || '')
						});
						if(!uniqueRes.data){
							this.$message({message: '<% for(uniqueKey in table.uniqueKeys){ %>${uniqueKey.description} <% } %>已经存在，不能重复添加!', type: 'error'})
							return;
						}
						<% } %>
						this.editLoading = true
						let params = Object.assign({}, this.dataForm)
						this.$api.${table.objectName}.save(params).then((res) => {
							if(res.code == 200) {
								this.$message({ message: '操作成功', type: 'success' })
							} else {
								this.$message({message: '操作失败, ' + res.msg, type: 'error'})
							}
							this.editLoading = false
							this.$refs['dataForm'].resetFields()
							this.editDialogVisible = false
							this.findPage(null)
						})
					})
				}
			})
		},
		async beforeHooks () {
		    //查询字典数据
            //this.options_xxx = await this.$refs.currTable.findDictByType('xxx');
            //查询外键数据
            /*this.options_xxx = await this.$api.xxx.findAll().then(res => {
                return (res && res.data) ? this.$refs.currTable.findForeignOptions(res.data, "idStr", "nameStr"):[];
            });*/
            <%
               for(column in columns_target) {
                  if(column.isDict) {
            %>
            this.options_${column.fieldName} = await this.$refs.currTable.findDictByType('${column.dictType}');
            <%
                  }
               }
            %>
            this.translation = [
                /*{col:"type", col_label:"type_Label",options: options_type},*/
                <%
                   for(column in columns_target) {
                      if(column.isDict) {
                %>
                {col:"${column.fieldName}", col_label:"${column.fieldName}_Label", options: this.options_${column.fieldName}},
                <%
                      }
                   }
                %>
            ],

            //调用findPage查询数据
            this.isReady = true
		},
	},
	mounted() {},
	created() {},
}
</script>

<style scoped>

</style>